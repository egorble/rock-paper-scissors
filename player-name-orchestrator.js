// player-name-orchestrator.js
const express = require('express');
const { exec } = require('child_process');
const util = require('util');
const execPromise = util.promisify(exec);
const fetch = require('node-fetch');
const path = require('path');
const cors = require('cors');

const app = express();
const port = 3001;
const FAUCET_URL = "https://faucet.testnet-babbage.linera.net"; // –ó–æ–≤–Ω—ñ—à–Ω—ñ–π testnet —Ñ–∞—É—Å–µ—Ç
const NODE_SERVICE_URL = "http://localhost:8080"; // Node service –¥–ª—è GraphQL

app.use(express.json());
app.use(cors()); // –î–æ–∑–≤–æ–ª–∏—Ç–∏ CORS –¥–ª—è –≤–µ–±-—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
app.use(express.static('.')); // –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
let applicationId = "e48b94f1e6b8e12ebc29546f06b496dbeefce0062e1d7d162a112b53b23eaad1"; // –Ñ–¥–∏–Ω–∏–π app ID –¥–ª—è –≤—Å—ñ—Ö —á–µ–π–Ω—ñ–≤
let leaderboardChainId = "877849f6ad00108bb3fc2be6c9f260dd91acb914d4c2ea87efc5efed28fe58ec"; // Leaderboard chain ID
let mainChainId = null;
let chains = []; // –ú–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –ª–∞–Ω—Ü—é–≥—ñ–≤

// –§—É–Ω–∫—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ GraphQL –∑–∞–ø–∏—Ç—ñ–≤ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
function executeGraphQLAsync(url, query, operationName) {
    console.log(`üöÄ –ü–æ—á–∞—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ${operationName} (async)`);
    console.log(`   üåê URL: ${url}`);
    
    fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ query })
    })
    .then(response => {
        console.log(`üì° HTTP –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è ${operationName}: ${response.status} ${response.statusText}`);
        if (!response.ok) {
            console.error(`‚ùå HTTP ${response.status} –¥–ª—è ${operationName}: ${response.statusText}`);
            return;
        }
        return response.json();
    })
    .then(result => {
        if (result && result.errors) {
            console.error(`‚ùå GraphQL –ø–æ–º–∏–ª–∫–∞ –¥–ª—è ${operationName}:`, result.errors);
            return;
        }
        if (result && result.data) {
            console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç ${operationName}:`, result.data);
        }
        console.log(`‚úÖ ${operationName} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ (async)`);
    })
    .catch(error => {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${operationName} (async):`, error.message);
        console.error(`   üîç –î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏:`, error);
    });
}

// –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
app.get('/', (req, res) => {
    res.send(`
        <h1>üéÆ Player Name Orchestrator</h1>
        <p>–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è Linera Player Name –¥–æ–¥–∞—Ç–∫—É</p>
        <ul>
            <li><a href="/player-name-test-advanced.html">–¢–µ—Å—Ç–æ–≤–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥</a></li>
            <li><a href="/status">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏</a></li>
        </ul>
    `);
});

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–±—ñ–≤ (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞)
app.post('/remove-all-mobs', (req, res) => {
    const { chainId } = req.body;
    
    if (!chainId) {
        return res.status(400).json({
            success: false,
            message: 'Chain ID –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
        });
    }
    
    console.log(`üßπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–±—ñ–≤ (async)...`);
    
    const mutation = `
        mutation {
            removeAllMobs
        }
    `;
    
    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    executeGraphQLAsync(
        `${NODE_SERVICE_URL}/chains/${chainId}/applications/${applicationId}`,
        mutation,
        'removeAllMobs'
    );
    
    // –í—ñ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    res.json({
        success: true,
        message: '–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–±—ñ–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (async)',
        chainId: chainId,
        applicationId: applicationId,
        note: '–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ'
    });
});

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è –≥—Ä–∞–≤—Ü—è (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞)
app.post('/add-health', (req, res) => {
    const { chainId, amount } = req.body;
    
    if (!chainId || amount === undefined) {
        return res.status(400).json({
            success: false,
            message: 'Chain ID —Ç–∞ amount –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
        });
    }
    
    if (amount <= 0) {
        return res.status(400).json({
            success: false,
            message: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–¥–æ—Ä–æ–≤\'—è –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ—é'
        });
    }
    
    console.log(`üíö –î–æ–¥–∞–≤–∞–Ω–Ω—è ${amount} –∑–¥–æ—Ä–æ–≤\'—è –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId} (async)...`);
    
    const mutation = `mutation {
        addHealth(amount: ${amount})
    }`;
    
    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    executeGraphQLAsync(
        `${NODE_SERVICE_URL}/chains/${chainId}/applications/${applicationId}`,
        mutation,
        `addHealth(${amount})`
    );
    
    // –í—ñ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    res.json({
        success: true,
        message: `–ó–∞–ø–∏—Ç –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è ${amount} –∑–¥–æ—Ä–æ–≤\'—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (async)`,
        chainId: chainId,
        applicationId: applicationId,
        amount: amount,
        note: '–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ'
    });
});

// –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è –≥—Ä–∞–≤—Ü—è (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞)
app.post('/subtract-health', (req, res) => {
    const { chainId, amount } = req.body;
    
    if (!chainId || amount === undefined) {
        return res.status(400).json({
            success: false,
            message: 'Chain ID —Ç–∞ amount –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
        });
    }
    
    if (amount <= 0) {
        return res.status(400).json({
            success: false,
            message: '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–¥–æ—Ä–æ–≤\'—è –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ—é'
        });
    }
    
    console.log(`üíî –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è ${amount} –∑–¥–æ—Ä–æ–≤\'—è –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId} (async)...`);
    
    const mutation = `mutation {
        subtractHealth(amount: ${amount})
    }`;
    
    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    executeGraphQLAsync(
        `${NODE_SERVICE_URL}/chains/${chainId}/applications/${applicationId}`,
        mutation,
        `subtractHealth(${amount})`
    );
    
    // –í—ñ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    res.json({
        success: true,
        message: `–ó–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è ${amount} –∑–¥–æ—Ä–æ–≤\'—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (async)`,
        chainId: chainId,
        applicationId: applicationId,
        amount: amount,
        note: '–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ'
    });
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è –≥—Ä–∞–≤—Ü—è
app.get('/get-health/:chainId', async (req, res) => {
    try {
        const { chainId } = req.params;
        
        if (!chainId) {
            return res.status(400).json({
                success: false,
                message: 'Chain ID –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
            });
        }
        
        console.log(`üíö –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤\'—è –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId}...`);
        
        // URL –¥–ª—è GraphQL –∑–∞–ø–∏—Ç—É –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
        const appUrl = `http://localhost:8080/chains/${chainId}/applications/${applicationId}`;
        
        const query = {
            query: `query {
                health
            }`
        };
        
        console.log('üîç GraphQL –∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤\'—è:');
        console.log('URL:', appUrl);
        console.log('Query:', JSON.stringify(query, null, 2));
        console.log('Raw query string:', query.query);
        
        const response = await fetch(appUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(query)
        });
        
        const responseText = await response.text();
        console.log('Get health response:', responseText);
        
        if (!responseText || responseText.trim() === '') {
            throw new Error('Empty response from server');
        }
        
        const result = JSON.parse(responseText);
        
        console.log('üì• –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GraphQL —Å–µ—Ä–≤–µ—Ä–∞ (–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤\'—è):');
        console.log('Status:', response.status);
        console.log('Response:', JSON.stringify(result, null, 2));
        
        if (result.errors) {
            throw new Error(`GraphQL error: ${JSON.stringify(result.errors)}`);
        }
        
        const health = result.data.health;
        console.log(`‚úÖ –ü–æ—Ç–æ—á–Ω–µ –∑–¥–æ—Ä–æ–≤\'—è: ${health}`);
        
        res.json({
            success: true,
            message: '–ó–¥–æ—Ä–æ–≤\'—è –æ—Ç—Ä–∏–º–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ',
            health: health,
            chainId: chainId,
            applicationId: applicationId
        });
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤\'—è:', error);
        res.status(500).json({
            success: false,
            message: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤\'—è',
            error: error.message
        });
    }
});

// –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
app.get('/status', (req, res) => {
    res.json({
        orchestrator: 'running',
        faucetUrl: FAUCET_URL,
        nodeServiceUrl: NODE_SERVICE_URL,
        applicationId: applicationId,
        leaderboardChainId: leaderboardChainId,
        mainChainId: mainChainId,
        timestamp: new Date().toISOString()
    });
});



// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ª–∞–Ω—Ü—é–≥–∞ —á–µ—Ä–µ–∑ openChain –º—É—Ç–∞—Ü—ñ—é
app.post('/create-chain', async (req, res) => {
    console.log('üîó –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ª–∞–Ω—Ü—é–≥–∞ —á–µ—Ä–µ–∑ openChain –º—É—Ç–∞—Ü—ñ—é...');

    try {
        // –î–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∞–Ω—Ü—é–≥–∞
        const chainId = "877849f6ad00108bb3fc2be6c9f260dd91acb914d4c2ea87efc5efed28fe58ec";
        const ownerAddress = "0x785608bf7edc4e4958e3f658c47df7cbb1fc08499a4d5ca0c61d29b591cf8164";
        const balance = "1";

        console.log(`–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∞–Ω—Ü—é–≥–∞ –∑ ID: ${chainId}`);
        console.log(`–í–ª–∞—Å–Ω–∏–∫: ${ownerAddress}`);
        console.log(`–ë–∞–ª–∞–Ω—Å: ${balance}`);

        // GraphQL –º—É—Ç–∞—Ü—ñ—è openChain
        const mutation = {
            query: `mutation {
                openChain(
                    chainId: "${chainId}",
                    owner: "${ownerAddress}",
                    balance: "${balance}"
                )
            }`
        };

        const response = await fetch(NODE_SERVICE_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(mutation)
        });

        const responseText = await response.text();
        console.log(`–í—ñ–¥–ø–æ–≤—ñ–¥—å openChain: ${responseText}`);

        if (!responseText.trim()) {
            throw new Error("–ü–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Node Service.");
        }

        const result = JSON.parse(responseText);

        if (result.errors) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ openChain: ${JSON.stringify(result.errors)}`);
            throw new Error(`openChain –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É: ${JSON.stringify(result.errors)}`);
        }

        const newChainId = result.data.openChain;
        console.log(`‚úÖ –õ–∞–Ω—Ü—é–≥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${newChainId}`);

        // –ó–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –ª–∞–Ω—Ü—é–≥
        chains.push({
            chainId: newChainId,
            owner: ownerAddress,
            balance: balance,
            createdAt: new Date().toISOString()
        });

        // –ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫ –æ—Å–Ω–æ–≤–Ω–∏–π –ª–∞–Ω—Ü—é–≥, —è–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π
        if (!mainChainId) {
            mainChainId = newChainId;
            console.log(`üìå –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –æ—Å–Ω–æ–≤–Ω–∏–π Chain ID: ${mainChainId}`);
        }

        res.status(200).json({
            success: true,
            message: 'Chain ID —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ–π Faucet.',
            chainId: newChainId
        });

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Chain ID:', error);
        res.status(500).json({ 
            success: false,
            message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
            error: error.message 
        });
    }
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ Application ID
app.get('/application-id', (req, res) => {
    res.json({
        applicationId: applicationId
    });
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è Leaderboard Chain ID
app.get('/leaderboard-chain-id', (req, res) => {
    res.json({
        leaderboardChainId: leaderboardChainId
    });
});

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Application ID –≤—Ä—É—á–Ω—É
app.post('/set-application-id', async (req, res) => {
    try {
        const { appId } = req.body;
        
        if (!appId) {
            return res.status(400).json({
                success: false,
                message: 'Application ID –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
            });
        }
        
        applicationId = appId;
        console.log(`‚úÖ Application ID –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${applicationId}`);
        
        res.json({
            success: true,
            message: 'Application ID —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
            applicationId: applicationId
        });
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Application ID:', error);
        res.status(500).json({
            success: false,
            message: '–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Application ID',
            error: error.message
        });
    }
});

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –≥—Ä–∞–≤—Ü—è (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞)
app.post('/set-player-name', (req, res) => {
    const { chainId, applicationId, playerName } = req.body;
    
    if (!chainId || !applicationId || !playerName) {
        return res.status(400).json({
            success: false,
            message: 'Chain ID, Application ID —Ç–∞ Player Name –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
        });
    }
    
    console.log(`‚úèÔ∏è –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ "${playerName}" –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId} (async)...`);
    
    const mutation = `mutation {
        setName(name: "${playerName}")
    }`;
    
    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    executeGraphQLAsync(
        `${NODE_SERVICE_URL}/chains/${chainId}/applications/${applicationId}`,
        mutation,
        `setName(${playerName})`
    );
    
    // –í—ñ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    res.json({
        success: true,
        message: `–ó–∞–ø–∏—Ç –Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ "${playerName}" –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (async)`,
        playerName: playerName,
        chainId: chainId,
        applicationId: applicationId,
        note: '–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ'
    });
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ –≥—Ä–∞–≤—Ü—è
app.get('/get-player-name/:chainId/:applicationId', async (req, res) => {
    try {
        const { chainId, applicationId } = req.params;
        
        console.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId}...`);
        
        // URL –¥–ª—è GraphQL –∑–∞–ø–∏—Ç—É –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
        const appUrl = `http://localhost:8080/chains/${chainId}/applications/${applicationId}`;
        
        const query = {
            query: `query {
                playerName
            }`
        };
        
        const response = await fetch(appUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(query)
        });
        
        const responseText = await response.text();
        console.log('Get name response:', responseText);
        
        if (!responseText || responseText.trim() === '') {
            throw new Error('Empty response from server');
        }
        
        const result = JSON.parse(responseText);
        
        console.log('üì• –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GraphQL —Å–µ—Ä–≤–µ—Ä–∞ (–æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ):');
        console.log('Status:', response.status);
        console.log('Response:', JSON.stringify(result, null, 2));
        
        if (result.errors) {
            throw new Error(`GraphQL error: ${JSON.stringify(result.errors)}`);
        }
        
        const currentName = result.data.playerName;
        console.log(`‚úÖ –ü–æ—Ç–æ—á–Ω–µ —ñ–º'—è: "${currentName}"`);
        
        res.json({
            success: true,
            playerName: currentName,
            chainId: chainId,
            applicationId: applicationId
        });
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ:', error);
        res.status(500).json({
            success: false,
            message: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ',
            error: error.message
        });
    }
});



// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –ª–∞–Ω—Ü—é–≥—ñ–≤
app.get('/check-chains', async (req, res) => {
    try {
        console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –ª–∞–Ω—Ü—é–≥—ñ–≤...');
        
        // GraphQL –∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ª–∞–Ω—Ü—é–≥—ñ–≤
        const query = {
            query: `query {
                chains {
                    list
                }
            }`
        };
        
        const response = await fetch(NODE_SERVICE_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(query)
        });
        
        const responseText = await response.text();
        console.log('Chains response:', responseText);
        
        const result = JSON.parse(responseText);
        
        if (result.errors) {
            throw new Error(`GraphQL error: ${JSON.stringify(result.errors)}`);
        }
        
        const chains = result.data.chains.list || [];
        console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${chains.length} –ª–∞–Ω—Ü—é–≥—ñ–≤`);
        
        res.json({
            success: true,
            message: `–ó–Ω–∞–π–¥–µ–Ω–æ ${chains.length} –ª–∞–Ω—Ü—é–≥—ñ–≤`,
            chains: chains,
            count: chains.length
        });
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–∞–Ω—Ü—é–≥—ñ–≤:', error.message);
        res.status(500).json({
            success: false,
            message: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ª–∞–Ω—Ü—é–≥—ñ–≤',
            error: error.message
        });
    }
});

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–æ–Ω–µ—Ç –≥—Ä–∞–≤—Ü—é (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞)
app.post('/add-coins', (req, res) => {
    const { chainId, amount } = req.body;
    
    if (!chainId || !amount) {
        return res.status(400).json({
            success: false,
            message: 'Chain ID —Ç–∞ amount –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
        });
    }
    
    const coinAmount = parseInt(amount);
    if (isNaN(coinAmount) || coinAmount <= 0) {
        return res.status(400).json({
            success: false,
            message: 'Amount –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —á–∏—Å–ª–æ–º'
        });
    }
    
    console.log(`üí∞ –î–æ–¥–∞–≤–∞–Ω–Ω—è ${coinAmount} –º–æ–Ω–µ—Ç –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId} (async)...`);
    
    const mutation = `mutation {
        addCoins(amount: ${coinAmount})
    }`;
    
    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    executeGraphQLAsync(
        `${NODE_SERVICE_URL}/chains/${chainId}/applications/${applicationId}`,
        mutation,
        `addCoins(${coinAmount})`
    );
    
    // –í—ñ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    res.json({
        success: true,
        message: `–ó–∞–ø–∏—Ç –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è ${coinAmount} –º–æ–Ω–µ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (async)`,
        amount: coinAmount,
        chainId: chainId,
        applicationId: applicationId,
        note: '–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ'
    });
});

// –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –º–æ–Ω–µ—Ç –≥—Ä–∞–≤—Ü—è (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞)
app.post('/subtract-coins', (req, res) => {
    const { chainId, amount } = req.body;
    
    if (!chainId || !amount) {
        return res.status(400).json({
            success: false,
            message: 'Chain ID —Ç–∞ amount –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
        });
    }
    
    const coinAmount = parseInt(amount);
    if (isNaN(coinAmount) || coinAmount <= 0) {
        return res.status(400).json({
            success: false,
            message: 'Amount –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —á–∏—Å–ª–æ–º'
        });
    }
    
    console.log(`üí∏ –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è ${coinAmount} –º–æ–Ω–µ—Ç –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId} (async)...`);
    
    const mutation = `mutation {
        subtractCoins(amount: ${coinAmount})
    }`;
    
    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    executeGraphQLAsync(
        `${NODE_SERVICE_URL}/chains/${chainId}/applications/${applicationId}`,
        mutation,
        `subtractCoins(${coinAmount})`
    );
    
    // –í—ñ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    res.json({
        success: true,
        message: `–ó–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è ${coinAmount} –º–æ–Ω–µ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (async)`,
        amount: coinAmount,
        chainId: chainId,
        applicationId: applicationId,
        note: '–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ'
    });
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –º–æ–Ω–µ—Ç –≥—Ä–∞–≤—Ü—è
app.get('/get-coin-balance/:chainId', async (req, res) => {
    try {
        const { chainId } = req.params;
        
        console.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –º–æ–Ω–µ—Ç –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId}...`);
        
        // URL –¥–ª—è GraphQL –∑–∞–ø–∏—Ç—É –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
        const appUrl = `http://localhost:8080/chains/${chainId}/applications/${applicationId}`;
        
        const query = {
            query: `query {
                coinBalance
            }`
        };
        
        const response = await fetch(appUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(query)
        });
        
        const responseText = await response.text();
        console.log('Get coin balance response:', responseText);
        
        if (!responseText || responseText.trim() === '') {
            throw new Error('Empty response from server');
        }
        
        const result = JSON.parse(responseText);
        
        console.log('üì• –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GraphQL —Å–µ—Ä–≤–µ—Ä–∞ (–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É):');
        console.log('Status:', response.status);
        console.log('Response:', JSON.stringify(result, null, 2));
        
        if (result.errors) {
            throw new Error(`GraphQL error: ${JSON.stringify(result.errors)}`);
        }
        
        const balance = result.data.coinBalance;
        console.log(`‚úÖ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${balance} –º–æ–Ω–µ—Ç`);
        
        res.json({
            success: true,
            balance: balance,
            chainId: chainId,
            applicationId: applicationId
        });
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É:', error);
        res.status(500).json({
            success: false,
            message: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É',
            error: error.message
        });
    }
});

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–±–∞
// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–±–∞ (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞)
app.post('/create-mob', (req, res) => {
    const { chainId, mobId, health } = req.body;
    
    if (!chainId || !mobId || health === undefined) {
        return res.status(400).json({
            success: false,
            message: 'Chain ID, Mob ID —Ç–∞ health –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
        });
    }

    console.log(`üëπ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–±–∞ ${mobId} –∑ –∑–¥–æ—Ä–æ–≤\'—è–º ${health} (async)...`);
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –º–æ–±–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–¥–æ—Ä–æ–≤'—è
    let mobType = 1; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Ç–∏–ø 1
    if (health === 30) mobType = 1;
    else if (health === 50) mobType = 2;
    else if (health === 80) mobType = 3;
    
    const mutation = `mutation {
        createMob(mobId: "${mobId}", mobType: ${mobType}, maxHealth: ${health})
    }`;
    
    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    executeGraphQLAsync(
        `${NODE_SERVICE_URL}/chains/${chainId}/applications/${applicationId}`,
        mutation,
        `createMob(${mobId}, ${mobType}, ${health})`
    );
    
    // –í—ñ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    res.json({
        success: true,
        message: `–ó–∞–ø–∏—Ç –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–±–∞ ${mobId} –∑ –∑–¥–æ—Ä–æ–≤\'—è–º ${health} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (async)`,
        mobId: mobId,
        health: health,
        mobType: mobType,
        chainId: chainId,
        applicationId: applicationId,
        note: '–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ'
    });
});

// –ó–∞–≤–¥–∞–Ω–Ω—è —à–∫–æ–¥–∏ –º–æ–±—É (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞)
app.post('/damage-mob', (req, res) => {
    const { chainId, mobId, damage } = req.body;
    
    if (!chainId || !mobId || damage === undefined) {
        return res.status(400).json({
            success: false,
            message: 'Chain ID, Mob ID —Ç–∞ damage –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
        });
    }

    console.log(`‚öîÔ∏è –ó–∞–≤–¥–∞–Ω–Ω—è ${damage} —à–∫–æ–¥–∏ –º–æ–±—É ${mobId} (async)...`);
    
    const mutation = `mutation {
        damageMob(mobId: "${mobId}", damage: ${damage})
    }`;
    
    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    executeGraphQLAsync(
        `${NODE_SERVICE_URL}/chains/${chainId}/applications/${applicationId}`,
        mutation,
        `damageMob(${mobId}, ${damage})`
    );
    
    // –í—ñ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    res.json({
        success: true,
        message: `–ó–∞–ø–∏—Ç –Ω–∞ –∑–∞–≤–¥–∞–Ω–Ω—è ${damage} —à–∫–æ–¥–∏ –º–æ–±—É ${mobId} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (async)`,
        mobId: mobId,
        damage: damage,
        chainId: chainId,
        applicationId: applicationId,
        note: '–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ'
    });
});

// –í–∏–¥–∞–ª–µ–Ω–Ω—è –º–æ–±–∞ (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞)
app.post('/remove-mob', (req, res) => {
    const { chainId, mobId } = req.body;
    
    if (!chainId || !mobId) {
        return res.status(400).json({
            success: false,
            message: 'Chain ID —Ç–∞ Mob ID –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
        });
    }

    console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –º–æ–±–∞ ${mobId} (async)...`);
    
    const mutation = `mutation {
        removeMob(mobId: "${mobId}")
    }`;
    
    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    executeGraphQLAsync(
        `${NODE_SERVICE_URL}/chains/${chainId}/applications/${applicationId}`,
        mutation,
        `removeMob(${mobId})`
    );
    
    // –í—ñ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    res.json({
        success: true,
        message: `–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–æ–±–∞ ${mobId} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (async)`,
        mobId: mobId,
        chainId: chainId,
        applicationId: applicationId,
        note: '–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ'
    });
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è –º–æ–±–∞
app.get('/get-mob-health/:chainId/:mobId', async (req, res) => {
    try {
        const { chainId, mobId } = req.params;
        
        if (!chainId || !mobId) {
            return res.status(400).json({
                success: false,
                message: 'Chain ID —Ç–∞ Mob ID –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
            });
        }
        
        console.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤\'—è –º–æ–±–∞ ${mobId}...`);
        
        const query = `
            query {
                mobHealth(mobId: "${mobId}")
            }
        `;
        
        const response = await fetch(`${NODE_SERVICE_URL}/chains/${leaderboardChainId}/applications/${applicationId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ query })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        
        if (result.errors) {
            throw new Error(`GraphQL –ø–æ–º–∏–ª–∫–∞: ${JSON.stringify(result.errors)}`);
        }
        
        const health = result.data?.mobHealth || 0;
        
        console.log(`‚úÖ –ó–¥–æ—Ä–æ–≤\'—è –º–æ–±–∞ ${mobId}: ${health}`);
        
        res.json({
            success: true,
            health: health,
            mobId: mobId
        });
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤\'—è –º–æ–±–∞:', error.message);
        res.status(500).json({
            success: false,
            message: `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤\'—è –º–æ–±–∞: ${error.message}`,
            health: 0
        });
    }
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–±—ñ–≤
app.get('/get-all-mobs/:chainId', async (req, res) => {
    try {
        const { chainId } = req.params;
        
        if (!chainId) {
            return res.status(400).json({
                success: false,
                message: 'Chain ID –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
            });
        }
        
        console.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–±—ñ–≤...`);
        
        const query = `
            query {
                mobs {
                    mobId
                    mobType
                    currentHealth
                    maxHealth
                    createdAt
                }
            }
        `;
        
        const response = await fetch(`${NODE_SERVICE_URL}/chains/${leaderboardChainId}/applications/${applicationId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ query })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json();
        
        if (result.errors) {
            throw new Error(`GraphQL –ø–æ–º–∏–ª–∫–∞: ${JSON.stringify(result.errors)}`);
        }
        
        const mobs = result.data?.mobs || [];
        
        console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${mobs.length} –º–æ–±—ñ–≤`);
        
        res.json({
            success: true,
            mobs: mobs,
            count: mobs.length
        });
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–±—ñ–≤:', error.message);
        res.status(500).json({
            success: false,
            message: `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ–±—ñ–≤: ${error.message}`,
            mobs: []
        });
    }
});

// ===== LEADERBOARD ENDPOINTS =====

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É
app.post('/setup-leaderboard', (req, res) => {
    const { chainId, leaderboardChainId } = req.body;
    
    if (!chainId || !leaderboardChainId) {
        console.log(`‚ùå Setup Leaderboard: –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏`);
        console.log(`   - chainId: ${chainId || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`   - leaderboardChainId: ${leaderboardChainId || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
        return res.status(400).json({
            success: false,
            message: 'Chain ID —Ç–∞ Leaderboard Chain ID –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
        });
    }

    console.log(`üèÜ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId} (async)...`);
    console.log(`   üìã –î–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Ç—É:`);
    console.log(`   - Chain ID: ${chainId}`);
    console.log(`   - Leaderboard Chain ID: ${leaderboardChainId}`);
    console.log(`   - Application ID: ${applicationId}`);
    console.log(`   - Node Service URL: ${NODE_SERVICE_URL}`);
    
    const mutation = `mutation {
        setupLeaderboard(leaderboardChainId: "${leaderboardChainId}")
    }`;
    
    const graphqlUrl = `${NODE_SERVICE_URL}/chains/${chainId}/applications/${applicationId}`;
    console.log(`   üîó GraphQL URL: ${graphqlUrl}`);
    console.log(`   üìù Mutation: ${mutation}`);
    
    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    executeGraphQLAsync(
        graphqlUrl,
        mutation,
        'setupLeaderboard'
    );
    
    // –í—ñ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    res.json({
        success: true,
        message: '–ó–∞–ø–∏—Ç –Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (async)',
        chainId: chainId,
        leaderboardChainId: leaderboardChainId,
        applicationId: applicationId,
        note: '–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ'
    });
    
    console.log(`‚úÖ Setup Leaderboard: HTTP –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∫–ª—ñ—î–Ω—Ç—É`);
});

// –ü–æ–¥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
app.post('/submit-score', (req, res) => {
    const { chainId, score } = req.body;
    
    if (!chainId || score === undefined) {
        return res.status(400).json({
            success: false,
            message: 'Chain ID —Ç–∞ score –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'
        });
    }

    console.log(`üèÜ –ü–æ–¥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É ${score} –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId} (async)...`);
    
    const mutation = `mutation {
        submitScore(score: ${score})
    }`;
    
    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    executeGraphQLAsync(
        `${NODE_SERVICE_URL}/chains/${chainId}/applications/${applicationId}`,
        mutation,
        `submitScore(${score})`
    );
    
    // –í—ñ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    res.json({
        success: true,
        message: `–ó–∞–ø–∏—Ç –Ω–∞ –ø–æ–¥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É ${score} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (async)`,
        score: score,
        chainId: chainId,
        applicationId: applicationId,
        note: '–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ'
    });
});

// –°–∫–∏–¥–∞–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è leaderboard chain)
app.post('/reset-leaderboard', (req, res) => {
    const { chainId } = req.body;
    
    if (!chainId) {
        return res.status(400).json({
            success: false,
            message: 'Chain ID –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
        });
    }

    console.log(`üèÜ –°–∫–∏–¥–∞–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId} (async)...`);
    
    const mutation = `mutation {
        resetLeaderboard
    }`;
    
    // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    executeGraphQLAsync(
        `${NODE_SERVICE_URL}/chains/${chainId}/applications/${applicationId}`,
        mutation,
        'resetLeaderboard'
    );
    
    // –í—ñ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    res.json({
        success: true,
        message: '–ó–∞–ø–∏—Ç –Ω–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (async)',
        chainId: chainId,
        applicationId: applicationId,
        note: '–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ'
    });
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É
app.get('/global-leaderboard/:chainId', async (req, res) => {
    try {
        const { chainId } = req.params;
        
        if (!chainId) {
            return res.status(400).json({
                success: false,
                message: 'Chain ID –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
            });
        }

        console.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId}...`);
        
        const query = `
            query {
                globalLeaderboard {
                    playerName
                    score
                    chainId
                    timestamp
                }
            }
        `;
        
        const response = await fetch(`${NODE_SERVICE_URL}/chains/${leaderboardChainId}/applications/${applicationId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ query })
        });

        const result = await response.json();

        if (result.errors) {
            console.error('‚ùå GraphQL –ø–æ–º–∏–ª–∫–∏:', result.errors);
            return res.status(500).json({
                success: false,
                message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É',
                errors: result.errors
            });
        }

        res.json({
            success: true,
            globalLeaderboard: result.data.globalLeaderboard,
            chainId: leaderboardChainId,
            applicationId: applicationId
        });
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            error: error.message
        });
    }
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤
app.get('/top-players/:chainId/:limit?', async (req, res) => {
    try {
        const { chainId, limit = 10 } = req.params;
        
        if (!chainId) {
            return res.status(400).json({
                success: false,
                message: 'Chain ID –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
            });
        }

        const limitNum = Math.min(parseInt(limit) || 10, 100); // –ú–∞–∫—Å–∏–º—É–º 100

        console.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø ${limitNum} –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId}...`);
        
        const query = `
            query {
                topPlayers(limit: ${limitNum}) {
                    playerName
                    score
                    chainId
                    timestamp
                }
            }
        `;
        
        const response = await fetch(`${NODE_SERVICE_URL}/chains/${leaderboardChainId}/applications/${applicationId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ query })
        });

        const result = await response.json();

        if (result.errors) {
            console.error('‚ùå GraphQL –ø–æ–º–∏–ª–∫–∏:', result.errors);
            return res.status(500).json({
                success: false,
                message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤',
                errors: result.errors
            });
        }

        res.json({
            success: true,
            topPlayers: result.data.topPlayers,
            limit: limitNum,
            chainId: leaderboardChainId,
            applicationId: applicationId
        });
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            error: error.message
        });
    }
});

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤
app.get('/total-players/:chainId', async (req, res) => {
    try {
        const { chainId } = req.params;
        
        if (!chainId) {
            return res.status(400).json({
                success: false,
                message: 'Chain ID –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
            });
        }

        console.log(`üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId}...`);
        
        const query = `
            query {
                totalPlayers
            }
        `;
        
        const response = await fetch(`${NODE_SERVICE_URL}/chains/${leaderboardChainId}/applications/${applicationId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ query })
        });

        const result = await response.json();

        if (result.errors) {
            console.error('‚ùå GraphQL –ø–æ–º–∏–ª–∫–∏:', result.errors);
            return res.status(500).json({
                success: false,
                message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤',
                errors: result.errors
            });
        }

        res.json({
            success: true,
            totalPlayers: result.data.totalPlayers,
            chainId: leaderboardChainId,
            applicationId: applicationId
        });
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            error: error.message
        });
    }
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ leaderboard chain
app.get('/is-leaderboard-chain/:chainId', async (req, res) => {
    try {
        const { chainId } = req.params;
        
        if (!chainId) {
            return res.status(400).json({
                success: false,
                message: 'Chain ID –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π'
            });
        }

        console.log(`üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ leaderboard chain –¥–ª—è –¥–æ–¥–∞—Ç–∫—É ${applicationId}...`);
        
        const query = `
            query {
                isLeaderboardChain
                leaderboardChainId
            }
        `;
        
        const response = await fetch(`${NODE_SERVICE_URL}/chains/${chainId}/applications/${applicationId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ query })
        });
        
        const result = await response.json();
        
        if (result.errors) {
            console.error('‚ùå GraphQL –ø–æ–º–∏–ª–∫–∏:', result.errors);
            return res.status(500).json({
                success: false,
                message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ leaderboard chain',
                errors: result.errors
            });
        }
        
        res.json({
            success: true,
            isLeaderboardChain: result.data.isLeaderboardChain,
            leaderboardChainId: result.data.leaderboardChainId,
            chainId: chainId,
            applicationId: applicationId
        });
        
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ leaderboard chain:', error);
        res.status(500).json({
            success: false,
            message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            error: error.message
        });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
    console.log(`üéÆ Player Name Orchestrator –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${port}`);
    console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ñ endpoints:`);
    console.log(`   GET  /                              - –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞`);
    console.log(`   GET  /status                        - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏`);
    console.log(`   GET  /application-id                - –û—Ç—Ä–∏–º–∞—Ç–∏ Application ID`);
    console.log(`   GET  /leaderboard-chain-id          - –û—Ç—Ä–∏–º–∞—Ç–∏ Leaderboard Chain ID`);
    console.log(`   POST /set-application-id            - –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Application ID`);
    console.log(`   POST /create-chain                 - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª–∞–Ω—Ü—é–≥–∞`);
    console.log(`   POST /set-player-name              - –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ`);
    console.log(`   GET  /get-player-name/:chain/:app  - –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ`);
    console.log(`   POST /add-coins                    - –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–æ–Ω–µ—Ç`);
    console.log(`   POST /subtract-coins               - –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –º–æ–Ω–µ—Ç`);
    console.log(`   GET  /get-coin-balance/:chain/:app - –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É`);
    console.log(`   POST /add-health                   - –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è`);
    console.log(`   POST /subtract-health              - –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è`);
    console.log(`   GET  /get-health/:chain/:app       - –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è`);
    console.log(`   POST /create-mob                   - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–±–∞`);
    console.log(`   POST /damage-mob                   - –ó–∞–≤–¥–∞–Ω–Ω—è —à–∫–æ–¥–∏ –º–æ–±—É`);
    console.log(`   POST /remove-mob                   - –í–∏–¥–∞–ª–µ–Ω–Ω—è –º–æ–±–∞`);
    console.log(`   POST /remove-all-mobs              - –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–±—ñ–≤`);
    console.log(`   GET  /get-mob-health/:chain/:app/:mob - –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è –º–æ–±–∞`);
    console.log(`   GET  /get-all-mobs/:chain/:app     - –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–±—ñ–≤`);
    console.log(`   GET  /check-chains                 - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–∞–Ω—Ü—é–≥—ñ–≤`);
    console.log(``);
    console.log(`üèÜ Leaderboard endpoints:`);
    console.log(`   POST /setup-leaderboard            - –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥`);
    console.log(`   POST /submit-score                 - –ü–æ–¥–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç`);
    console.log(`   POST /reset-leaderboard            - –°–∫–∏–Ω—É—Ç–∏ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥`);

    console.log(`   GET  /global-leaderboard/:chainId  - –û—Ç—Ä–∏–º–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –ª—ñ–¥–µ—Ä–±–æ—Ä–¥`);
    console.log(`   GET  /top-players/:chainId/:limit  - –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–ø –≥—Ä–∞–≤—Ü—ñ–≤`);
    console.log(`   GET  /total-players/:chainId       - –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤`);
    console.log(`   GET  /is-leaderboard-chain/:chainId - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ leaderboard chain`);
    console.log(``);
    console.log(`üåê –§—Ä–æ–Ω—Ç–µ–Ω–¥: http://localhost:${port}/player-name-test-advanced.html`);
    console.log(`üîß –§–∞—É—Å–µ—Ç: ${FAUCET_URL}`);
    console.log(`üì° Node Service: ${NODE_SERVICE_URL}`);
});